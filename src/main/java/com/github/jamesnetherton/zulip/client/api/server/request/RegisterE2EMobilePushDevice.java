package com.github.jamesnetherton.zulip.client.api.server.request;

import static com.github.jamesnetherton.zulip.client.api.server.request.ServerRequestConstants.MOBILE_PUSH_REGISTER;

import com.github.jamesnetherton.zulip.client.api.core.VoidExecutableApiRequest;
import com.github.jamesnetherton.zulip.client.api.core.ZulipApiRequest;
import com.github.jamesnetherton.zulip.client.api.core.ZulipApiResponse;
import com.github.jamesnetherton.zulip.client.api.server.TokenKind;
import com.github.jamesnetherton.zulip.client.exception.ZulipClientException;
import com.github.jamesnetherton.zulip.client.http.ZulipHttpClient;

/**
 * Zulip API request builder for registering a E2E mobile push device.
 *
 * @see <a href="https://zulip.com/api/e2ee-test-notify">https://zulip.com/api/e2ee-test-notify</a>
 */
public class RegisterE2EMobilePushDevice extends ZulipApiRequest implements VoidExecutableApiRequest {
    public static final String TOKEN_KIND = "token_kind";
    public static final String PUSH_ACCOUNT_ID = "push_account_id";
    public static final String PUSH_PUBLIC_KEY = "push_public_key";
    public static final String BOUNCER_PUBLIC_KEY = "bouncer_public_key";
    public static final String ENCRYPTED_PUSH_REGISTRATION = "encrypted_push_registration";

    /**
     * RegisterE2EMobilePushDevice a {@link ZulipApiRequest}.
     *
     * @param client                    The Zulip HTTP client
     * @param tokenKind                 The {@link TokenKind} for how the token was generated
     * @param pushAccountId             Random integer to be included in mobile push notifications & encrypted payloads to
     *                                  identify pushes as being related to this registration
     * @param pushPublicKey             Push public key encoded using an RFC 4648 standard base64 encoder
     * @param bouncerPublicKey          Bouncer public key encoded using an RFC 4648 standard base64 encoder
     * @param encryptedPushRegistration Ciphertext generated by encrypting a PushRegistration Map using the bouncer_public_key
     *                                  field. Encoded using an RFC 4648 standard base64 encoder. The PushRegistration map
     *                                  contains fields token, token_kind, timestamp, and for iOS devices ios_app_id. The map
     *                                  must be JSON encoded before encryption.
     */
    public RegisterE2EMobilePushDevice(
            ZulipHttpClient client,
            TokenKind tokenKind,
            int pushAccountId,
            String pushPublicKey,
            String bouncerPublicKey,
            String encryptedPushRegistration) {
        super(client);
        putParam(TOKEN_KIND, tokenKind.toString());
        putParam(PUSH_ACCOUNT_ID, pushAccountId);
        putParam(PUSH_PUBLIC_KEY, pushPublicKey);
        putParam(BOUNCER_PUBLIC_KEY, bouncerPublicKey);
        putParam(ENCRYPTED_PUSH_REGISTRATION, encryptedPushRegistration);
    }

    /**
     * Executes the Zulip API request for registering a E2E mobile push device.
     *
     * @throws ZulipClientException if the request was not successful
     */
    @Override
    public void execute() throws ZulipClientException {
        client().post(MOBILE_PUSH_REGISTER, getParams(), ZulipApiResponse.class);
    }
}
